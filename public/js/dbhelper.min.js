class DBHelper{static get DB_NAME(){return"restaurants-db"}static get RESTAURANTS_OBJECT_STORE(){return"restaurants"}static get REVIEWS_OBJECT_STORE(){return"reviews"}static openDB(){return idb.open(DBHelper.DB_NAME,4,e=>{e.objectStoreNames.contains(DBHelper.RESTAURANTS_OBJECT_STORE)||e.createObjectStore(DBHelper.RESTAURANTS_OBJECT_STORE,{keyPath:"id"})})}static get RESTAURANTS_URL(){return"http://localhost:1337/restaurants"}static get REVIEWS_URL(){return"http://localhost:1337/reviews/"}static async fetchRestaurants(e){try{const t=(await DBHelper.openDB()).transaction(DBHelper.RESTAURANTS_OBJECT_STORE,"readwrite").objectStore(DBHelper.RESTAURANTS_OBJECT_STORE);let a=await t.getAll();if(10===a.length)return console.log("we already stored on DB"),void e(null,a);e(null,a=await DBHelper.fetchRestaurantsFromNetwork()),await DBHelper.saveRestaurantsOnDB(a)}catch(t){e(t,null)}}static async fetchRestaurantsFromNetwork(){try{const e=await window.fetch(DBHelper.RESTAURANTS_URL);return e.ok?e.json():Promise.reject(`error returned with ${e.status} status code`)}catch(e){return Promise.reject(e)}}static async saveRestaurantsOnDB(e){const t=(await DBHelper.openDB()).transaction(DBHelper.RESTAURANTS_OBJECT_STORE,"readwrite").objectStore(DBHelper.RESTAURANTS_OBJECT_STORE);return e.forEach(async e=>{await t.get(e.id)||await t.add(e)})}static async fetchRestaurantById(e,t){let a;try{const r=(await DBHelper.openDB()).transaction(DBHelper.RESTAURANTS_OBJECT_STORE).objectStore(DBHelper.RESTAURANTS_OBJECT_STORE);let s=await r.get(parseInt(e));if(s)return console.log("I am exist on DB"),s.reviews?(console.log("reviews exist ",s.reviews),void t(null,s)):((a=await DBHelper.getRestaurantReviews(e))&&(s.reviews=a,await DBHelper.updateRestaurantInDB(s)),void t(null,s));s=await DBHelper.fetchRestaurantFromNetwork(e),a=await DBHelper.getRestaurantReviews(e),s.reviews=a,t(null,s)}catch(e){t(e,null)}}static async fetchRestaurantFromNetwork(e){try{const t=(await DBHelper.openDB()).transaction(DBHelper.RESTAURANTS_OBJECT_STORE,"readwrite").objectStore(DBHelper.RESTAURANTS_OBJECT_STORE),a=await fetch(`${DBHelper.RESTAURANTS_URL}/${e}`);return a.ok?(t.add(a.json()),a.json()):Promise.reject(`error returned with status ${a.status}`)}catch(e){return Promise.reject(e)}}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((a,r)=>{if(a)t(a,null);else{const a=r.filter(t=>t.cuisine_type==e);t(null,a)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((a,r)=>{if(a)t(a,null);else{const a=r.filter(t=>t.neighborhood==e);t(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,a){DBHelper.fetchRestaurants((r,s)=>{if(r)a(r,null);else{let r=s;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),a(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].neighborhood),r=t.filter((e,a)=>t.indexOf(e)==a);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].cuisine_type),r=t.filter((e,a)=>t.indexOf(e)==a);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return window.location.pathname.includes("restaurant.html")?`/img/${e.id}.jpg`:`/img/smallimg/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static async changeRestaurantFavorite(e,t){const{is_favorite:a,id:r}=e,s="false"===a?"true":"false";e.is_favorite=s,await DBHelper.updateRestaurantInDB(e),fetch(`http://localhost:1337/restaurants/${r}\n        /?is_favorite=${s}`,{method:"PUT"}).then(e=>e.json()).then(e=>t(null,e.is_favorite)).catch(e=>t(e))}static formatDate(e){return new Date(e).toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit",seconds:"2-digit"})}static async addNewRestaurantReview(e,t,a){if(navigator.onLine)try{await fetch("http://localhost:1337/reviews",{method:"POST",body:JSON.stringify({restaurant_id:e.id,...t})}).then(e=>e.json()).then(t=>{e.reviews=[...e.reviews,t],console.log(e.reviews),a(null,"data saved to the server successfully ")}),await DBHelper.updateRestaurantInDB(e)}catch(e){a(e,null)}else try{e.reviews=[...e.reviews,{restaurant_id:e.id,...t}],await DBHelper.updateRestaurantInDB(e),a(null,"You are offline review saved locally when you're online data will sent to server")}catch(e){a(e,null)}}static async getRestaurantReviews(e){try{let t=await fetch(`${DBHelper.REVIEWS_URL}?restaurant_id=${e}`);return t.ok?t.json():null}catch(e){return null}}static async updateRestaurantInDB(e){console.log("id is ",e.id),console.log("id is ",e.id);try{const t=(await DBHelper.openDB()).transaction(DBHelper.RESTAURANTS_OBJECT_STORE,"readwrite").objectStore(DBHelper.RESTAURANTS_OBJECT_STORE);return await t.put(e),console.log(e),"success"}catch(e){console.error(e)}}static async updateServerAndDB(e){const t=[];if(e)try{return e.reviews.forEach(async e=>{e.id?t.push(e):(console.log("I am here "),await fetch(`${DBHelper.REVIEWS_URL}`,{method:"POST",body:JSON.stringify({...e})}).then(e=>e.json()).then(e=>{console.log(e),t.push(e)}).catch(e=>console.log(e)),console.log("I am here 2"))}),e.reviews=t,console.log(t),await DBHelper.updateRestaurantInDB(e),Promise.resolve("done")}catch(e){return Promise.reject(e)}}}